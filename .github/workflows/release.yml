name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true

permissions:
  contents: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: NovelDrive v${{ steps.get_version.outputs.version }}
          body: |
            ## NovelDrive v${{ steps.get_version.outputs.version }}
            
            ### 新機能
            - 

            ### 改善
            - 

            ### バグ修正
            - 

            ### その他
            - 

            詳細は[CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md)をご覧ください。
          draft: true
          prerelease: false

  build-and-release:
    name: Build and Release
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
            ext: AppImage
          - os: windows-latest
            platform: win32
            arch: x64
            ext: exe
          - os: macos-latest
            platform: darwin
            arch: x64
            ext: dmg
          - os: macos-latest
            platform: darwin
            arch: arm64
            ext: dmg
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install build tools (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y build-essential
      
      - name: Install dependencies
        run: npm ci
      
      - name: Setup DuckDB
        run: npm run setup:duckdb || true
        continue-on-error: true
      
      - name: Update version in package.json
        run: |
          npm version ${{ needs.create-release.outputs.version }} --no-git-tag-version
      
      - name: Build application
        run: npm run build
        env:
          NODE_OPTIONS: --max-old-space-size=4096
      
      - name: Build Electron app
        run: |
          if [ "${{ matrix.platform }}" = "darwin" ] && [ "${{ matrix.arch }}" = "arm64" ]; then
            npm run build -- --mac --arm64
          else
            npm run build -- --${{ matrix.platform }} --${{ matrix.arch }}
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_LINK: ${{ secrets.MAC_CERTS }}
          CSC_KEY_PASSWORD: ${{ secrets.MAC_CERTS_PASSWORD }}
          APPLEID: ${{ secrets.APPLE_ID }}
          APPLEIDPASS: ${{ secrets.APPLE_ID_PASS }}
      
      - name: Get release file name
        id: get_filename
        run: |
          if [ "${{ matrix.platform }}" = "linux" ]; then
            FILENAME="NovelDrive-${{ needs.create-release.outputs.version }}-linux-x86_64.AppImage"
          elif [ "${{ matrix.platform }}" = "win32" ]; then
            FILENAME="NovelDrive-Setup-${{ needs.create-release.outputs.version }}.exe"
          elif [ "${{ matrix.platform }}" = "darwin" ]; then
            if [ "${{ matrix.arch }}" = "arm64" ]; then
              FILENAME="NovelDrive-${{ needs.create-release.outputs.version }}-arm64.dmg"
            else
              FILENAME="NovelDrive-${{ needs.create-release.outputs.version }}.dmg"
            fi
          fi
          echo "filename=$FILENAME" >> $GITHUB_OUTPUT
        shell: bash
      
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./release/${{ steps.get_filename.outputs.filename }}
          asset_name: ${{ steps.get_filename.outputs.filename }}
          asset_content_type: application/octet-stream
      
      - name: Upload artifacts for debugging
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: release-debug-${{ matrix.platform }}-${{ matrix.arch }}
          path: |
            release/
            npm-debug.log
          retention-days: 3

  publish-release:
    name: Publish Release
    needs: [create-release, build-and-release]
    runs-on: ubuntu-latest
    
    steps:
      - name: Publish release
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const tag = 'v${{ needs.create-release.outputs.version }}';
            
            // Get the release by tag
            const releases = await github.rest.repos.listReleases({
              owner,
              repo
            });
            
            const release = releases.data.find(r => r.tag_name === tag);
            
            if (release && release.draft) {
              // Update release to published
              await github.rest.repos.updateRelease({
                owner,
                repo,
                release_id: release.id,
                draft: false
              });
              
              console.log(`Published release ${tag}`);
            } else {
              console.log(`Release ${tag} not found or already published`);
            }